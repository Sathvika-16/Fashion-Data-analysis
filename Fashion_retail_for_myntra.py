# -*- coding: utf-8 -*-
"""Copy of Fashion Retail for myntra

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IZdDuK9-mUtBAsYhM-co6i6gJAxzc11g
"""

from google.colab import drive
drive.mount('/content/drive')
#Streamlit

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:230%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400;
            text-align: center;"><u><b>Fashion Retail Sales</b></u>
</div>

<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>IMPORT NEEDED LIBRARIES</i>
</div>
"""

import pandas as pd
import os
import json
from pathlib import Path
import matplotlib.pyplot as plt
from matplotlib import colors
import numpy as np
import sys
import ast
import matplotlib.cm as cm
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

colors = ["#89CFF0", "#FF69B4", "#FFD700", "#7B68EE", "#FF4500",
          "#9370DB", "#32CD32", "#8A2BE2", "#FF6347", "#20B2AA",
          "#FF69B4", "#00CED1", "#FF7F50", "#7FFF00", "#DA70D6"]

# Ignores warnings while execuring dataset
import warnings
warnings.filterwarnings('ignore')

# Printing the directory in which the files exist
for dirname, _, filenames in os.walk('/content/drive/MyDrive/archive'):
    print(dirname)

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATASET LOADING</i>
</div>
"""

df=pd.read_csv("/content/drive/MyDrive/archive/Fashion.csv")
df.head()

def satisfaction_score(rating):
    if rating >= 4.0:
        return 'Satisfied'
    elif rating >= 2.5:
        return 'Neutral'
    else:
        return 'Dissatisfied'

# Apply the function to create a new column
df['Satisfaction_Status'] = df['Review Rating'].apply(satisfaction_score)

# Optionally shuffle the DataFrame to demonstrate the change
df = df.sample(frac=1).reset_index(drop=True)

# Add a new column 'state' with alternating values 'a' and 'b'
df['state'] = ['a' if i < len(df) / 2 else 'b' for i in range(len(df))]

# Insert the new column at the beginning of the DataFrame
df.insert(0, 'state', df.pop('state'))

# Display the DataFrame
df.head()

styled_df = df.style.set_table_styles([{'selector': 'th', 'props': [('background', 'lightgrey')]}])
styled_df

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DISPLAY A SAMPLE ...</i>
</div>
"""

df.sample(3)

df.head(3)

df['Item Purchased'].unique()

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATASET GENERAL INFORMATION</i>
</div>
"""

df.info()

# Mapping dictionary
mapping = {
    'Belt': 'Accessory', 'Handbag': 'Accessory', 'Blouse': 'Top', 'Polo Shirt': 'Top', 'Raincoat': 'Outerwear', 'Tank Top': 'Top', 'Flip-Flops': 'Footwear', 'Hoodie': 'Outerwear',
    'Socks': 'Footwear', 'Bowtie': 'Accessory', 'Sunglasses': 'Accessory', 'T-shirt': 'Top', 'Poncho': 'Outerwear', 'Vest': 'Outerwear',
    'Skirt': 'Bottom',
    'Blazer': 'Outerwear',
    'Pajamas': 'Sleepwear',
    'Jacket': 'Outerwear',
    'Gloves': 'Accessory',
    'Slippers': 'Footwear',
    'Backpack': 'Accessory',
    'Boots': 'Footwear',
    'Sun Hat': 'Accessory',
    'Trousers': 'Bottom',
    'Overalls': 'Bottom',
    'Camisole': 'Top',
    'Trench Coat': 'Outerwear',
    'Pants': 'Bottom',
    'Romper': 'One-piece',
    'Sneakers': 'Footwear',
    'Jumpsuit': 'One-piece',
    'Onesie': 'One-piece',
    'Flannel Shirt': 'Top',
    'Coat': 'Outerwear',
    'Leggings': 'Bottom',
    'Sandals': 'Footwear',
    'Wallet': 'Accessory',
    'Tie': 'Accessory',
    'Shorts': 'Bottom',
    'Loafers': 'Footwear',
    'Kimono': 'Outerwear',
    'Scarf': 'Accessory',
    'Cardigan': 'Outerwear',
    'Hat': 'Accessory',
    'Swimsuit': 'Swimwear',
    'Tunic': 'Top',
    'Dress': 'One-piece',
    'Sweater': 'Top',
    'Umbrella': 'Accessory',
    'Jeans': 'Bottom'
}

# Replace specific items with generalized categories in 'Item Purchased' column
df['Item Purchased'] = df['Item Purchased'].replace(mapping)

df.head()

df['Item Purchased'].unique()

df.info()

# Convert 'Date Purchase' to datetime format
df['Date Purchase'] = pd.to_datetime(df['Date Purchase'])

# Ensure the data is sorted by date
df = df.sort_values(by='Date Purchase')

structure_summary = pd.DataFrame({'Data Type': df.dtypes,
                                  'Non-Null Count': df.count(),
                                  'Missing Values': df.isnull().sum()})

# Create a Styler object to apply formatting
styled_summary = structure_summary.style.set_properties(**{'text-align': 'center', 'border-color': 'black', 'border-style': 'solid'})

styled_summary = styled_summary.set_table_styles([
    # {'selector': 'thead', 'props': [('background-color', '#f7f7f7'), ('border-color', 'black'), ('border-style', 'solid')]},
    {'selector': 'th', 'props': [('border-color', 'black'), ('border-style', 'solid')]},
    {'selector': 'td', 'props': [('border-color', 'black'), ('border-style', 'solid')]}
])

display(styled_summary)

"""<div style="padding:10px;

            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>CHECK COLUMNS DATATYPES !</i>
</div>
"""

df.dtypes

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATASET STRUCTURE</i>
</div>
"""

print(f'Records: {df.shape[0]}')
print(f'Columns: {df.shape[1]}')

column_names = df.keys().values.tolist()
column_names

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>CHECK FOR NULLS & MISSING VALUES</i>
</div>
"""

df.isnull().sum()

null_counts = df.isnull().sum()
null_percentages = (df.isnull().sum() / len(df)) * 100

null_summary = pd.DataFrame({'Null Count': null_counts, 'Null Percentage': null_percentages})

styled_null_summary = null_summary.style.background_gradient(cmap='Reds', subset=['Null Percentage'])
styled_null_summary

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>LOGICALLY DROP Purchase Amount MISSING VALUES !</i>
</div>
"""

df = df.dropna(subset=['Purchase Amount (USD)'])

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Review Rating MISSING VALUES CAN BE FILLED WITH THE <b>AVERAGE RATING</b> VALUE !</i>
</div>
"""

average_rating = df['Review Rating'].mean()

df['Review Rating'] = df['Review Rating'].fillna(average_rating)

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>CHECK AGAIN ...</i>
</div>
"""

new_count = df.isnull().sum()
new_percentage = (df.isnull().sum() / len(df)) * 100

clean_summary = pd.DataFrame({'Null Count': new_count, 'Null Percentage': new_percentage})

styled_clean_summary = clean_summary.style.background_gradient(cmap='Blues', subset=['Null Percentage'])
styled_clean_summary

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATASET STATISTICAL SUMMARY </i>
</div>
"""

# Generate summary statistics using describe()
summary_stats = df.describe()

# Create a Styler object to apply formatting
styled_summary = summary_stats.style.set_properties(**{'text-align': 'center', 'border-color': 'black', 'border-style': 'solid'})

# Apply additional CSS styling to the Styler object
styled_summary = styled_summary.set_table_styles([
    {'selector': 'thead', 'props': [('background-color', '#f7f7f7'), ('border-color', 'black'), ('border-style', 'solid')]},
    {'selector': 'th', 'props': [('border-color', 'black'), ('border-style', 'solid')]},
    {'selector': 'td', 'props': [('border-color', 'black'), ('border-style', 'solid')]}
])

# Display the styled summary statistics
styled_summary

# Create a Styler object to apply formatting
summary_stats = df.describe().transpose()

# Create a Styler object to apply formatting
styled_summary = summary_stats.style.set_properties(**{'text-align': 'center', 'border-color': 'black', 'border-style': 'solid'})

# Apply additional CSS styling to the Styler object
styled_summary = styled_summary.set_table_styles([
    {'selector': 'thead', 'props': [('background-color', '#f2f2f2'), ('border-color', 'black'), ('border-style', 'solid')]},
    {'selector': 'th', 'props': [('border-color', 'black'), ('border-style', 'solid'),
                                  ('background-color', '#8bb8f2'), ('color', '#ffffff')]},
    {'selector': 'td', 'props': [('border-color', 'black'), ('border-style', 'solid'),
                                  ('background-color', '#ffffff'), ('color', '#555555')]}
])

# Display the styled summary statistics table
styled_summary

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATASET FINAL SUMMARY ... </i>
</div>
"""

def summary(df):
    summary_df = pd.DataFrame(df.dtypes, columns=['dtypes'])
    summary_df['missing#'] = df.isna().sum()
    summary_df['missing%'] = (df.isna().sum())/len(df)
    summary_df['unique'] = df.nunique().values
    summary_df['count'] = df.count().values
    return summary_df

summary(df).style.background_gradient(cmap='Blues')

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATASET ANALYSIS & VISUALIZATION ... </i>
</div>

<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Customer Reference ID </i>
</div>
"""

df['Customer Reference ID'].duplicated().sum()

df['Customer Reference ID'].value_counts()

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><p><i>It means Customers have more than one purchase ...</i><br>
                             <i>Good Insight to keep in mind </i></p>
</div>

<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Item Purchased </i>
</div>
"""

# Create separate dataframes for each state
df_a = df[df['state'] == 'a']
df_b = df[df['state'] == 'b']

# Get value counts for each state
value_counts_a = df_a['Item Purchased'].value_counts()
value_counts_b = df_b['Item Purchased'].value_counts()

# Create Plotly tables for each state
table_a = go.Table(
    header=dict(values=["Category (State A)", "Count"],
                fill_color='black',
                font=dict(color='white')),
    cells=dict(values=[value_counts_a.index, value_counts_a.values],
               fill_color='white',
               font=dict(color='black')),
    columnwidth=[120, 80],
    header_align=['center', 'center'],
    cells_align=['center', 'center']
)

table_b = go.Table(
    header=dict(values=["Category (State B)", "Count"],
                fill_color='black',
                font=dict(color='white')),
    cells=dict(values=[value_counts_b.index, value_counts_b.values],
               fill_color='white',
               font=dict(color='black')),
    columnwidth=[120, 80],
    header_align=['center', 'center'],
    cells_align=['center', 'center']
)

# Define the table layout and display it
layout_table = go.Layout(
    width=800,
    height=300,
    margin=dict(l=50, r=50, t=50, b=50),
    paper_bgcolor='white',
    plot_bgcolor='white'
)

fig_table_a = go.Figure(data=[table_a], layout=layout_table)
fig_table_b = go.Figure(data=[table_b], layout=layout_table)

fig_table_a.show()
fig_table_b.show()

# 2. Top Purchased Products by State
top_purchased_products = df.groupby(['state', 'Item Purchased']).size().reset_index(name='Count')
plt.figure(figsize=(12, 6))
sns.barplot(x='Item Purchased', y='Count', hue='state', data=top_purchased_products)
plt.title('Top Purchased Products by State for all months')
plt.xlabel('Item Purchased')
plt.ylabel('Number of Purchases')
plt.xticks(rotation=45)
plt.legend(title='State')
plt.show()

# 1. Monthly Purchases by State
df['Month'] = df['Date Purchase'].dt.to_period('M')
monthly_purchases = df.groupby(['Month', 'state']).size().reset_index(name='Count')
plt.figure(figsize=(12, 6))
sns.barplot(x='Month', y='Count', hue='state', data=monthly_purchases)
plt.title('Monthly Purchases by State for all products')
plt.xlabel('Month')
plt.ylabel('Number of Purchases')
plt.xticks(rotation=45)
plt.legend(title='State')
plt.show()

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>DATE PURCHASE</i>
</div>

<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Purchase Amount (USD)	 </i>
</div>
"""

# Separate data by state
df_a = df[df['state'] == 'a']
df_b = df[df['state'] == 'b']

# Plotting side by side
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Plotting for State A
counts_a = df_a["Payment Method"].value_counts()
explode = (0, 0.1)  # Explode the 2nd slice (Cash)
colors = ['#1f77b4', '#ff7f0e']  # Blue and orange colors

counts_a.plot(kind='pie', fontsize=12, colors=colors, explode=explode, autopct='%1.1f%%', ax=axes[0])
axes[0].set_xlabel('Payment Method - State A', weight="bold", color="#ff2400", fontsize=15, labelpad=20)
axes[0].axis('equal')
axes[0].legend(labels=counts_a.index, loc="best")

# Plotting for State B
counts_b = df_b["Payment Method"].value_counts()

counts_b.plot(kind='pie', fontsize=12, colors=colors, explode=explode, autopct='%1.1f%%', ax=axes[1])
axes[1].set_xlabel('Payment Method - State B', weight="bold", color="#ff2400", fontsize=15, labelpad=20)
axes[1].axis('equal')
axes[1].legend(labels=counts_b.index, loc="best")

plt.tight_layout()
plt.show()

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:230%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400;
            text-align: center;"><u><b>Use Cases & Strategy Reporting</b></u>
</div>

<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Customers Segments & Satisfaction Levels</i>
</div>
"""

# Define the customer segments based on satisfaction levels
df['Satisfaction_Score'] = pd.cut(df['Review Rating'], bins=[0, 2.49, 3.99, 5], labels=['Dissatisfied', 'Neutral', 'Satisfied'])

# Analyze the characteristics of each segment for each state
segment_analysis_a = df[df['state'] == 'a'].groupby('Satisfaction_Score')['Item Purchased'].count().reset_index()
segment_analysis_b = df[df['state'] == 'b'].groupby('Satisfaction_Score')['Item Purchased'].count().reset_index()

# Create Plotly tables for each state
figure_a = go.Figure(data=[go.Table(
    header=dict(values=['Satisfaction Score', 'Count of Items Purchased'],
                fill_color='lightgrey',
                align='left'),
    cells=dict(values=[segment_analysis_a['Satisfaction_Score'],
                       segment_analysis_a['Item Purchased']],
               fill_color='white',
               align='left'))
])

figure_b = go.Figure(data=[go.Table(
    header=dict(values=['Satisfaction Score', 'Count of Items Purchased'],
                fill_color='lightgrey',
                align='left'),
    cells=dict(values=[segment_analysis_b['Satisfaction_Score'],
                       segment_analysis_b['Item Purchased']],
               fill_color='white',
               align='left'))
])

# Add title and adjust layout for each table
figure_a.update_layout(title='Customer Segment Analysis (State A)',
                    title_x=0.5,
                    autosize=False)

figure_b.update_layout(title='Customer Segment Analysis (State B)',
                    title_x=0.5,
                    autosize=False)

# Display the tables
figure_a.show()

figure_b.show()

# Function to plot side-by-side bar graphs with different colors
def plot_side_by_side_bars(df1, df2, label1, label2):
    plt.figure(figsize=(12, 6))

    # Define colors for bars
    colors_a = ['#1f77b4', '#ff7f0e', 'salmon']
    colors_b = ['#1f77b4', '#ff7f0e', 'salmon']

    # Plot for State A
    plt.subplot(1, 2, 1)
    plt.bar(df1['Satisfaction_Score'], df1['Item Purchased'], color=colors_a)
    plt.xlabel('Satisfaction Score', weight='bold', fontsize=12)
    plt.ylabel('Count of Items Purchased', weight='bold', fontsize=12)
    plt.title(f'Satisfaction Score Distribution - {label1}', weight='bold', fontsize=14)
    # plt.xticks(rotation=45)

    # Plot for State B
    plt.subplot(1, 2, 2)
    plt.bar(df2['Satisfaction_Score'], df2['Item Purchased'], color=colors_b)
    plt.xlabel('Satisfaction Score', weight='bold', fontsize=12)
    plt.ylabel('Count of Items Purchased', weight='bold', fontsize=12)
    plt.title(f'Satisfaction Score Distribution - {label2}', weight='bold', fontsize=14)
    # plt.xticks(rotation=45)

    plt.tight_layout()
    plt.show()

# Plot side-by-side bars for States A and B
plot_side_by_side_bars(segment_analysis_a, segment_analysis_b, 'State A', 'State B')

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Business Insights  </i>
</div>

<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Top 10 Customers</i>
</div>
"""

# Calculate total purchase amount for each customer in each state
customer_totals_a = df[df['state'] == 'a'].groupby('Customer Reference ID')['Purchase Amount (USD)'].sum().reset_index()
customer_totals_b = df[df['state'] == 'b'].groupby('Customer Reference ID')['Purchase Amount (USD)'].sum().reset_index()

# Sort the customers by their total purchase amount in descending order and get the top 10 for each state
top_10_customers_a = customer_totals_a.nlargest(10, 'Purchase Amount (USD)')
top_10_customers_b = customer_totals_b.nlargest(10, 'Purchase Amount (USD)')

# Create Plotly figures with tables for each state
fig_a = go.Figure(data=[go.Table(
    header=dict(values=['Customer Reference ID (State A)', 'Purchase Amount (USD)'],
                fill_color='turquoise',
                align='left'),
    cells=dict(values=[top_10_customers_a['Customer Reference ID'], top_10_customers_a['Purchase Amount (USD)']],
               fill_color='lavender',
               align='left'))
])

fig_b = go.Figure(data=[go.Table(
    header=dict(values=['Customer Reference ID (State B)', 'Purchase Amount (USD)'],
                fill_color='turquoise',
                align='left'),
    cells=dict(values=[top_10_customers_b['Customer Reference ID'], top_10_customers_b['Purchase Amount (USD)']],
               fill_color='lavender',
               align='left'))
])

# Update the layout of the tables
fig_a.update_layout(title='Top 10 Customers by Purchase Amount (State A)')
fig_b.update_layout(title='Top 10 Customers by Purchase Amount (State B)')

# Display the tables
fig_a.show()

fig_b.show()

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:130%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400"><i>Total Profit:   2022 Vs 2023</i>
</div>
"""

# Filter the dataset for the year 2022 and 2023 for each state
df_2022_a = df[(df['Date Purchase'].dt.year == 2022) & (df['state'] == 'a')]
df_2023_a = df[(df['Date Purchase'].dt.year == 2023) & (df['state'] == 'a')]

df_2022_b = df[(df['Date Purchase'].dt.year == 2022) & (df['state'] == 'b')]
df_2023_b = df[(df['Date Purchase'].dt.year == 2023) & (df['state'] == 'b')]

# Calculate the total profit for 2022 and 2023 for each state
total_profit_2022_a = df_2022_a['Purchase Amount (USD)'].sum()
total_profit_2023_a = df_2023_a['Purchase Amount (USD)'].sum()

total_profit_2022_b = df_2022_b['Purchase Amount (USD)'].sum()
total_profit_2023_b = df_2023_b['Purchase Amount (USD)'].sum()

# Create the data for the table
header = ['State', 'Year', 'Total Profit']
data = [
    ['State A', '2022', total_profit_2022_a],
    ['State A', '2023', total_profit_2023_a],
    ['State B', '2022', total_profit_2022_b],
    ['State B', '2023', total_profit_2023_b]
]

# Create a plotly table
table = go.Table(
    header=dict(values=header, fill=dict(color='black'), font=dict(color='white')),
    cells=dict(values=list(zip(*data)), fill=dict(color='grey'), font=dict(color='white'))
)

# Create a layout for the table
layout = dict(title='Total Profit comparison for 2022 and 2023 by State',
              width=600,
              height=350,
              paper_bgcolor='black',
              font=dict(color='white')
)

# Create a figure and add the table
fig = go.Figure(data=[table], layout=layout)

# Display the figure
fig.show()

# Create data for the bar chart
states = ['State A', 'State A', 'State B', 'State B']
years = ['2022', '2023', '2022', '2023']
total_profits = [total_profit_2022_a, total_profit_2023_a, total_profit_2022_b, total_profit_2023_b]

# Create a Plotly bar chart
fig = go.Figure(data=[
    go.Bar(name='2022', x=['State A', 'State B'], y=[total_profit_2022_a, total_profit_2022_b]),
    go.Bar(name='2023', x=['State A', 'State B'], y=[total_profit_2023_a, total_profit_2023_b])
])

# Update layout
fig.update_layout(
    title='Total Profit comparison for 2022 and 2023 by State',
    xaxis_title='State',
    yaxis_title='Total Profit (USD)',
    barmode='group',
    width=600,
    height=400,
    paper_bgcolor='white'
)

# Show the figure
fig.show()

# Function to get top 5 items for each state and month
def get_top_items_by_month(state_data):
    state_data['Month'] = pd.to_datetime(state_data['Date Purchase']).dt.to_period('M')
    grouped = state_data.groupby(['Month', 'Item Purchased']).size().reset_index(name='Count')
    top_items = grouped.sort_values(['Month', 'Count'], ascending=[True, False]).groupby('Month').head(5)
    return top_items

# Separate data by state
state_a_data = df[df['state'] == 'a']
state_b_data = df[df['state'] == 'b']

# Get top items for each state
top_items_a = get_top_items_by_month(state_a_data)
top_items_b = get_top_items_by_month(state_b_data)

# Function to format top items for display with dynamic background colors for months
def format_top_items(top_items, state_name):
    formatted_output = f"<div class='state-section'>" \
                       f"<div class='state-header'>Top Items Purchased for State {state_name.upper()}</div>" \
                       f"<div class='item-list'>" \
                       f"<table>" \
                       f"<thead>" \
                       f"<tr>" \
                       f"<th>Month</th>" \
                       f"<th>Item Purchased</th>" \
                       f"<th>Count</th>" \
                       f"</tr>" \
                       f"</thead>" \
                       f"<tbody>"

    # Define colors for months (example colors, replace with your desired colors)
    month_colors = {
        '2022-10': '#007bff',  # Blue
        '2022-11': '#6f42c1',  # Purple
        '2022-12': '#28a745',  # Green
        '2023-01': '#dc3545',  # Red
        '2023-02': '#fd7e14',  # Orange
        '2023-03': '#6610f2',  # Indigo
        '2023-04': '#17a2b8',  # Cyan
        '2023-05': '#ffc107',  # Yellow
        '2023-06': '#e83e8c',  # Pink
        '2023-07': '#20c997',  # Teal
        '2023-08': '#6c757d',  # Gray
        '2023-09': '#343a40'   # Dark Gray
    }

    for index, row in top_items.iterrows():
        month_color = month_colors.get(str(row['Month']), '#343a40')  # Default to dark gray if month not in dictionary
        formatted_output += f"<tr style='background-color: {month_color};'>" \
                            f"<td>{row['Month']}</td>" \
                            f"<td>{row['Item Purchased']}</td>" \
                            f"<td>{row['Count']}</td>" \
                            f"</tr>"

    formatted_output += f"</tbody>" \
                       f"</table>" \
                       f"</div>" \
                       f"</div>"

    return formatted_output

# Generate formatted HTML output for State A and State B
html_output = "<!DOCTYPE html><html lang='en'><head>" \
              "<meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>" \
              "<title>Top Items Purchased by Month and State</title>" \
              "<style>" \
              "body { font-family: Arial, sans-serif; background-color: #f0f0f0; padding: 20px; }" \
              ".state-section { margin-bottom: 30px; }" \
              ".state-header { background-color: #343a40; color: white; padding: 10px; margin-bottom: 10px; }" \
              ".item-list { background-color: #454d55; border: 1px solid #343a40; border-radius: 5px; padding: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }" \
              ".item-list table { width: 100%; border-collapse: collapse; margin-top: 10px; }" \
              ".item-list th, .item-list td { border: 1px solid #343a40; padding: 8px; text-align: left; color: white; }" \
              ".item-list th { background-color: #343a40; }" \
              "</style>" \
              "</head><body>"

html_output += format_top_items(top_items_a, 'a')
html_output += format_top_items(top_items_b, 'b')

html_output += "</body></html>"

# Display the HTML output
from IPython.display import display, HTML
display(HTML(html_output))

# Create grouped bar charts for each state
fig_a = go.Figure()
fig_b = go.Figure()

# Add traces for State A
for i, item in enumerate(top_items_a['Item Purchased'].unique()):
    fig_a.add_trace(go.Bar(
        x=top_items_a[top_items_a['Item Purchased'] == item]['Month'].astype(str),  # Convert Period to string
        y=top_items_a[top_items_a['Item Purchased'] == item]['Count'],
        name=f'Item: {item} (State A)',
        #marker_color=colors_a[i % len(colors_a)],  # Use modulo to cycle through colors
        legendgroup='group_a'
    ))

# Add traces for State B
for i, item in enumerate(top_items_b['Item Purchased'].unique()):
    fig_b.add_trace(go.Bar(
        x=top_items_b[top_items_b['Item Purchased'] == item]['Month'].astype(str),  # Convert Period to string
        y=top_items_b[top_items_b['Item Purchased'] == item]['Count'],
        name=f'Item: {item} (State B)',
        #marker_color=colors_b[i % len(colors_b)],  # Use modulo to cycle through colors
        legendgroup='group_b'
    ))

# Update layout for State A
fig_a.update_layout(
    barmode='group',
    xaxis_tickangle=-45,
    title='Top 5 Items Purchased by Month (State A)',
    xaxis_title='Month',
    yaxis_title='Count',
    legend_title='Items',
    width=1200,  # Increase width for better visibility
    height=800,  # Increase height for better visibility
    xaxis=dict(
        tickmode='array',
        tickvals=top_items_a['Month'].astype(str).tolist(),  # Set tick values to all months
        ticktext=top_items_a['Month'].astype(str).tolist()   # Set tick labels to all months
    )
)

# Update layout for State B
fig_b.update_layout(
    barmode='group',
    xaxis_tickangle=-45,
    title='Top 5 Items Purchased by Month (State B)',
    xaxis_title='Month',
    yaxis_title='Count',
    legend_title='Items',
    width=1200,  # Increase width for better visibility
    height=800,  # Increase height for better visibility
    xaxis=dict(
        tickmode='array',
        tickvals=top_items_b['Month'].astype(str).tolist(),  # Set tick values to all months
        ticktext=top_items_b['Month'].astype(str).tolist()   # Set tick labels to all months
    )
)


# Show the figures
fig_a.show()
fig_b.show()

# Get the unique months
unique_months = df['Month'].unique()
print(unique_months)

# Function to get top 5 items for each state and month
def get_top_items_by_month(state_data):
    state_data['Month'] = state_data['Date Purchase'].dt.to_period('M')
    grouped = state_data.groupby(['Month', 'Item Purchased']).size().reset_index(name='Count')
    top_items = grouped.sort_values(['Month', 'Count'], ascending=[True, False]).groupby('Month').head(5)
    return top_items

# Separate data by state
state_a_data = df[df['state'] == 'a']
state_b_data = df[df['state'] == 'b']

# Get top items for each state
top_items_a = get_top_items_by_month(state_a_data)
top_items_b = get_top_items_by_month(state_b_data)

# Get the unique months across both states
unique_months = pd.concat([top_items_a['Month'], top_items_b['Month']]).sort_values().unique()

# Ensure all months are included in the pivot tables
top_items_a_pivot = top_items_a.pivot_table(index='Month', columns='Item Purchased', values='Count', fill_value=0)
top_items_a_pivot = top_items_a_pivot.reindex(unique_months, fill_value=0)

top_items_b_pivot = top_items_b.pivot_table(index='Month', columns='Item Purchased', values='Count', fill_value=0)
top_items_b_pivot = top_items_b_pivot.reindex(unique_months, fill_value=0)

# Plot the heatmaps
plt.figure(figsize=(12, 6))
sns.heatmap(top_items_a_pivot, annot=True, cmap="YlGnBu")
plt.title('Heatmap of Top Purchased Items by Month for State A')
plt.xlabel('Item Purchased')
plt.ylabel('Month')
plt.show()

plt.figure(figsize=(12, 6))
sns.heatmap(top_items_b_pivot, annot=True, cmap="YlGnBu")
plt.title('Heatmap of Top Purchased Items by Month for State B')
plt.xlabel('Item Purchased')
plt.ylabel('Month')
plt.show()

# Function to get top 5 items for each state and month
def get_top_items_by_month(state_data):
    state_data['Month'] = state_data['Date Purchase'].dt.to_period('M')
    grouped = state_data.groupby(['Month', 'Item Purchased']).size().reset_index(name='Count')
    top_items = grouped.sort_values(['Month', 'Count'], ascending=[True, False]).groupby('Month').head(5)
    return top_items

# Function to find similar products (assuming similarity by category)
def find_similar_products(item):
    # Dummy implementation: Recommend products of the same category
    similar_items = df[df['Item Purchased'] == item]['Item Purchased'].unique()
    return similar_items

# Separate data by state
state_a_data = df[df['state'] == 'a']
state_b_data = df[df['state'] == 'b']

# Get top items for each state
top_items_a = get_top_items_by_month(state_a_data)
top_items_b = get_top_items_by_month(state_b_data)

# Generate recommendations for state A
recommendations_a = {}
for month in top_items_a['Month'].unique():
    recommendations_a[month] = []
    for item in top_items_a[top_items_a['Month'] == month]['Item Purchased']:
        similar_items = find_similar_products(item)
        recommendations_a[month].append((item, similar_items))

# Generate recommendations for state B
recommendations_b = {}
for month in top_items_b['Month'].unique():
    recommendations_b[month] = []
    for item in top_items_b[top_items_b['Month'] == month]['Item Purchased']:
        similar_items = find_similar_products(item)
        recommendations_b[month].append((item, similar_items))

# Function to format recommendations in HTML table format with dark color scheme
def format_recommendations_html(recommendations, state_name):
    formatted_output = f"<div class='state-section'>" \
                       f"<div class='state-header'>Recommendations for State {state_name.upper()}</div>"

    for month, items_list in recommendations.items():
        formatted_output += f"<div class='recommendation-block'>" \
                            f"<div class='month'>Month: {month}</div>" \
                            f"<table class='recommendation-table'>" \
                            f"<tr><th style='color: #5cb85c;'>Top Purchased Item</th><th style='color: #5cb85c;'>Recommended Items</th></tr>"

        for item, similar_items in items_list:
            recommended_items = ", ".join(similar_items)
            formatted_output += f"<tr><td>{item}</td><td>{recommended_items}</td></tr>"

        formatted_output += "</table></div>"

    formatted_output += "</div>"

    return formatted_output

# Generate HTML output with dark color scheme in tabular format
html_output = "<!DOCTYPE html><html lang='en'><head>" \
              "<meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>" \
              "<title>Recommendations for Top Purchased Items by State</title>" \
              "<style>" \
              "body { font-family: Arial, sans-serif; background-color: #333; color: #ddd; padding: 20px; }" \
              ".state-section { margin-bottom: 30px; background-color: #444; border: 1px solid #666; border-radius: 5px; padding: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }" \
              ".state-header { background-color: #222; color: #fff; padding: 10px; font-weight: bold; margin-bottom: 10px; border-top-left-radius: 5px; border-top-right-radius: 5px; }" \
              ".recommendation-block { margin-bottom: 20px; padding: 10px; border-top: 1px solid #666; }" \
              ".month { font-size: 14px; font-weight: bold; color: #66afe9; }" \
              ".recommendation-table { width: 100%; border-collapse: collapse; }" \
              ".recommendation-table th { padding: 8px; border: 1px solid #666; text-align: left; }" \
              ".recommendation-table td { padding: 8px; border: 1px solid #666; text-align: left; }" \
              "</style>" \
              "</head><body>"

html_output += format_recommendations_html(recommendations_a, 'a')
html_output += format_recommendations_html(recommendations_b, 'b')

html_output += "</body></html>"

# Display the HTML output
display(HTML(html_output))

"""<div style="padding:10px;
            color:#ff2400;
            background-color:#1f262a;
            margin:50px;
            font-size:230%;
            display:fill;
            border-radius:10px;
            border-style: solid;
            border-color: #a9aba9;
            overflow:hidden;
            font-weight:400;
            text-align: center;"><u><b>THE END</b></u>
</div>
"""